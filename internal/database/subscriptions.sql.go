// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: subscriptions.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createSubscription = `-- name: CreateSubscription :one
INSERT INTO subscriptions (user_id, pack_id)
VALUES ($1, $2)
RETURNING id, user_id, pack_id, created_at, updated_at
`

type CreateSubscriptionParams struct {
	UserID pgtype.UUID
	PackID pgtype.UUID
}

func (q *Queries) CreateSubscription(ctx context.Context, arg CreateSubscriptionParams) (Subscription, error) {
	row := q.db.QueryRow(ctx, createSubscription, arg.UserID, arg.PackID)
	var i Subscription
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PackID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteSubscription = `-- name: DeleteSubscription :exec
DELETE FROM subscriptions WHERE id = $1
`

func (q *Queries) DeleteSubscription(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteSubscription, id)
	return err
}

const readSubscription = `-- name: ReadSubscription :one
SELECT id, user_id, pack_id, created_at, updated_at FROM subscriptions WHERE id = $1
`

func (q *Queries) ReadSubscription(ctx context.Context, id pgtype.UUID) (Subscription, error) {
	row := q.db.QueryRow(ctx, readSubscription, id)
	var i Subscription
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PackID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateSubscription = `-- name: UpdateSubscription :one
UPDATE subscriptions
SET user_id = $1, pack_id = $2
WHERE id = $3
RETURNING id, user_id, pack_id, created_at, updated_at
`

type UpdateSubscriptionParams struct {
	UserID pgtype.UUID
	PackID pgtype.UUID
	ID     pgtype.UUID
}

func (q *Queries) UpdateSubscription(ctx context.Context, arg UpdateSubscriptionParams) (Subscription, error) {
	row := q.db.QueryRow(ctx, updateSubscription, arg.UserID, arg.PackID, arg.ID)
	var i Subscription
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PackID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
