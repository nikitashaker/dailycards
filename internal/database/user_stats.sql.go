// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user_stats.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addUserRating = `-- name: AddUserRating :exec
UPDATE user_stats
SET rating = rating + $1
WHERE user_id = $2
`

type AddUserRatingParams struct {
	Rating pgtype.Int4
	UserID pgtype.UUID
}

func (q *Queries) AddUserRating(ctx context.Context, arg AddUserRatingParams) error {
	_, err := q.db.Exec(ctx, addUserRating, arg.Rating, arg.UserID)
	return err
}

const createUserStats = `-- name: CreateUserStats :exec
INSERT INTO user_stats (user_id) VALUES ($1)
ON CONFLICT DO NOTHING
`

func (q *Queries) CreateUserStats(ctx context.Context, userID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, createUserStats, userID)
	return err
}

const getUserStats = `-- name: GetUserStats :one
SELECT rating, packs_created, packs_mastered
FROM user_stats
WHERE user_id = $1
`

type GetUserStatsRow struct {
	Rating        pgtype.Int4
	PacksCreated  pgtype.Int4
	PacksMastered pgtype.Int4
}

func (q *Queries) GetUserStats(ctx context.Context, userID pgtype.UUID) (GetUserStatsRow, error) {
	row := q.db.QueryRow(ctx, getUserStats, userID)
	var i GetUserStatsRow
	err := row.Scan(&i.Rating, &i.PacksCreated, &i.PacksMastered)
	return i, err
}

const incPacksCreated = `-- name: IncPacksCreated :exec
UPDATE user_stats
SET packs_created = packs_created + 1
WHERE user_id = $1
`

func (q *Queries) IncPacksCreated(ctx context.Context, userID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, incPacksCreated, userID)
	return err
}

const incPacksMastered = `-- name: IncPacksMastered :exec
UPDATE user_stats
SET packs_mastered = packs_mastered + 1
WHERE user_id = $1
`

func (q *Queries) IncPacksMastered(ctx context.Context, userID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, incPacksMastered, userID)
	return err
}
