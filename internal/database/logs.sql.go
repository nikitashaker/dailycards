// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: logs.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createLog = `-- name: CreateLog :one
INSERT INTO logs (user_id, pack_id, rating_improved, rating_worsen, cards_learned, cards_mastered)
VALUES ($1, $2, 3, 1, 5, 2)
RETURNING id, user_id, pack_id, rating_improved, rating_worsen, cards_learned, cards_mastered, created_at, updated_at
`

type CreateLogParams struct {
	UserID pgtype.UUID
	PackID pgtype.UUID
}

func (q *Queries) CreateLog(ctx context.Context, arg CreateLogParams) (Log, error) {
	row := q.db.QueryRow(ctx, createLog, arg.UserID, arg.PackID)
	var i Log
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PackID,
		&i.RatingImproved,
		&i.RatingWorsen,
		&i.CardsLearned,
		&i.CardsMastered,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteLog = `-- name: DeleteLog :exec
DELETE FROM logs WHERE id = $1
`

func (q *Queries) DeleteLog(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteLog, id)
	return err
}

const readLog = `-- name: ReadLog :one
SELECT id, user_id, pack_id, rating_improved, rating_worsen, cards_learned, cards_mastered, created_at, updated_at FROM logs WHERE id = $1
`

func (q *Queries) ReadLog(ctx context.Context, id pgtype.UUID) (Log, error) {
	row := q.db.QueryRow(ctx, readLog, id)
	var i Log
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PackID,
		&i.RatingImproved,
		&i.RatingWorsen,
		&i.CardsLearned,
		&i.CardsMastered,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateLog = `-- name: UpdateLog :one
UPDATE logs
SET rating_improved = 4, cards_mastered = 3
WHERE id = $1
RETURNING id, user_id, pack_id, rating_improved, rating_worsen, cards_learned, cards_mastered, created_at, updated_at
`

func (q *Queries) UpdateLog(ctx context.Context, id pgtype.UUID) (Log, error) {
	row := q.db.QueryRow(ctx, updateLog, id)
	var i Log
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PackID,
		&i.RatingImproved,
		&i.RatingWorsen,
		&i.CardsLearned,
		&i.CardsMastered,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
