// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: packs.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPack = `-- name: CreatePack :one
INSERT INTO packs (name, category)
VALUES ($1, $2)
RETURNING id, name, category, created_at, updated_at
`

type CreatePackParams struct {
	Name     string
	Category pgtype.Text
}

func (q *Queries) CreatePack(ctx context.Context, arg CreatePackParams) (Pack, error) {
	row := q.db.QueryRow(ctx, createPack, arg.Name, arg.Category)
	var i Pack
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Category,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deletePack = `-- name: DeletePack :exec
DELETE FROM packs WHERE id = $1
`

func (q *Queries) DeletePack(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deletePack, id)
	return err
}

const listPacks = `-- name: ListPacks :many
SELECT id, name, category, created_at, updated_at
FROM packs
ORDER BY created_at DESC
`

func (q *Queries) ListPacks(ctx context.Context) ([]Pack, error) {
	rows, err := q.db.Query(ctx, listPacks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Pack
	for rows.Next() {
		var i Pack
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Category,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const readPack = `-- name: ReadPack :one
SELECT id, name, category, created_at, updated_at FROM packs WHERE id = $1
`

func (q *Queries) ReadPack(ctx context.Context, id pgtype.UUID) (Pack, error) {
	row := q.db.QueryRow(ctx, readPack, id)
	var i Pack
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Category,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updatePack = `-- name: UpdatePack :one
UPDATE packs
SET name = $1, category = $2
WHERE id = $3
RETURNING id, name, category, created_at, updated_at
`

type UpdatePackParams struct {
	Name     string
	Category pgtype.Text
	ID       pgtype.UUID
}

func (q *Queries) UpdatePack(ctx context.Context, arg UpdatePackParams) (Pack, error) {
	row := q.db.QueryRow(ctx, updatePack, arg.Name, arg.Category, arg.ID)
	var i Pack
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Category,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
